<?php
namespace stic\TermiiPHP;

use GuzzleHttp\Promise\Promise;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\ClientException;
use Exception;

class Termii {
	protected $config;
	// ProxyPay constructor
	public function __construct($config) {
		$caFile = __DIR__.'/../res/cacert.pem';
		$this->config = (object) [
			"host" =>  "https://api.ng.termii.com/api",
			"apikey" => $config['apikey'],
			"from" => $config['from'],
			"certificate" =>  $caFile || $config['certificate']
		];
    }

    /** 
	* Create the headers 
	* @var $data
	*/
	function create_headers($data) {
		return [
			'Content-Type'   => 'application/json',
			"json" => true,
		];
    }

    function merge_data($data) {
        $data["api_key"] = $this->config->apikey;
        $data["certificate"] = $this->config->certificate;
        $data["from"] = $this->config->from;
        return $data;
    }
    
    /*
	* Method name: SendSMS.
	* Description: allows businesses send text messages to their customers.
	* params: data - An object containing all information needed to send sms.
	*/
	public function sendSms($data) {
        $data = $this->merge_data($data);
		// Send an asynchronous request.
		$request = new Request('POST', 
			$this->config->host . "/sms/send", 
			$this->create_headers($data), 
			json_encode($data)
		);
		$client = new Client([
			'verify' => $this->config->certificate,
		]);

		$promise = $client->sendAsync($request)
		->then(function ($response) {
			return $response->getBody()->getContents();
		}, function (Exception $e) {
			return $e->getMessage();
		});
		return $promise->wait();
	}


     /*
	* Method name: sendToAutoGeneratedNumber.
	* Description:  allows businesses send messages to customers using Termii's auto-generated messaging numbers that adapt to customers location.
	* params: data - An object containing all information needed to send sms.
	*/
	public function sendToAutoGeneratedNumber($data) {
        $data = $this->merge_data($data);
		// Send an asynchronous request.
		$request = new Request('POST', 
            $this->config->host . "/sms/number/send", 
			$this->create_headers($data), 
			json_encode($data)
		);
		$client = new Client([
			'verify' => $this->config->certificate,
		]);

		$promise = $client->sendAsync($request)
		->then(function ($response) {
			return $response->getBody()->getContents();
		}, function (Exception $e) {
			return $e->getMessage();
		});
		return $promise->wait();
    }
    
    /*
	* Method name: sendOtpToken.
	* Description: allows businesses trigger one-time-passwords (pins) across any available messaging channel on Termii.
	* params: data - An object containing all information needed to send sms.
	*/
	public function sendOtpToken($data) {
        $data = $this->merge_data($data);
		// Send an asynchronous request.
		$request = new Request('POST', 
            $this->config->host . "/sms/otp/send", 
			$this->create_headers($data), 
			json_encode($data)
		);
		$client = new Client([
			'verify' => $this->config->certificate,
		]);

		$promise = $client->sendAsync($request)
		->then(function ($response) {
			return $response->getBody()->getContents();
		}, function (Exception $e) {
			return $e->getMessage();
		});
		return $promise->wait();
    }
    
    /*
	* Method name: verifyOtpToken.
	* Description: checks tokens sent to customers and returns a response confirming the status of the token. A token can either be confirmed as verified or expired based on the timer set for the token.
	* params: data - An object containing all information needed to send sms.
	*/
	public function verifyOtpToken($data) {
        $data = $this->merge_data($data);
		// Send an asynchronous request.
		$request = new Request('POST', 
            $this->config->host . "/sms/otp/verify", 
			$this->create_headers($data), 
			json_encode($data)
		);
		$client = new Client([
			'verify' => $this->config->certificate,
		]);

		$promise = $client->sendAsync($request)
		->then(function ($response) {
			return $response->getBody()->getContents();
		}, function (Exception $e) {
			return $e->getMessage();
		});
		return $promise->wait();
	}
    

    /*
	* Method name: getBalance.
	* Description: returns your total balance and balance information from your wallet, such as currency.
	* params: data - An object containing all information needed to send sms.
	*/
	public function getBalance() {
		// Send an asynchronous request.
		$request = new Request('GET', $this->config->host . "/get-balance?api_key=" . $this->config->apikey);
		$client = new Client([
			'verify' => $this->config->certificate,
		]);

		$promise = $client->sendAsync($request)
		->then(function ($response) {
			return $response->getBody()->getContents();
		}, function (Exception $e) {
			return $e->getMessage();
		});
		return $promise->wait();
    }

    /*
	* Method name: checkPhoneStatus.
	* Description: allows businesses verify phone numbers and automatically detect their status as well as current network.
	* params: data - An object containing all information needed to send sms.
	*/
	public function checkPhoneStatus($phone_number) {
		// Send an asynchronous request.
		$request = new Request('GET', $this->config->host . "/check/dnd?api_key=" . $this->config->apikey . "&phone_number=" . $phone_number);
		$client = new Client([
			'verify' => $this->config->certificate,
		]);

		$promise = $client->sendAsync($request)
		->then(function ($response) {
			return $response->getBody()->getContents();
		}, function (Exception $e) {
			return $e->getMessage();
		});
		return $promise->wait();
    }
}